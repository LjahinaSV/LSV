Ошибки, транспонирование
Добавьте в программу из предыдущей задачи класс MatrixError,
содержащий внутри self поля matrix1 и matrix2 — ссылки на матрицы.

В класс Matrix внесите следующие изменения:

 Добавьте в метод __add__ проверку на ошибки в размере входных данных,
 чтобы при попытке сложить матрицы разных размеров было выброшено исключение MatrixError
 таким образом,
 чтобы matrix1 поле MatrixError стало первым аргументом __add__ (просто self),
 а matrix2  —  вторым (второй операнд для сложения).

 Реализуйте метод transpose, транспонирующий матрицу и возвращающую результат
 (данный метод модифицирует экземпляр класса Matrix)

 Реализуйте статический метод transposed, принимающий Matrix
 и возвращающий транспонированную матрицу. Пример статического метода.
 https://ru.wikibooks.org/wiki/Python/Объектно-ориентированное_программирование_на_Python#Статический_метод

Формат ввода
Как в предыдущей задаче.

Формат вывода
Как в предыдущей задаче.

Примеры
Тест 1
Входные данные:
# Task 3 check 1
# Check exception to add method
m1 = Matrix([[1, 0, 0], [0, 1, 0], [0, 0, 1]])
m2 = Matrix([[0, 1, 0], [20, 0, -1], [-1, -2, 0]])
print(m1 + m2)

m2 = Matrix([[0, 1, 0], [20, 0, -1]])
try:
    m = m1 + m2
    print('WA\n' + str(m))
except MatrixError as e:
    print(e.matrix1)
    print(e.matrix2)

Вывод программы:
1	1	0
20	1	-1
-1	-2	1
1	0	0
0	1	0
0	0	1
0	1	0
20	0	-1



Тест 2
Входные данные:
# Task 3 check 2
m = Matrix([[10, 10], [0, 0], [1, 1]])
print(m)
m1 = m.transpose()
print(m)
print(m1)

Вывод программы:
10	10
0	0
1	1
10	0	1
10	0	1
10	0	1
10	0	1



Тест 3
Входные данные:
# Task 3 check 3
m = Matrix([[10, 10], [0, 0], [1, 1]])
print(m)
print(Matrix.transposed(m))
print(m)

Вывод программы:
10	10
0	0
1	1
10	0	1
10	0	1
10	10
0	0
1	1