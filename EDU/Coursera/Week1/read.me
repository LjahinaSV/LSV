Типы данных и функции вывода
Переменные
Арифметические выражения
Операции над строками
Чтение данных
Примеры решения задач
Как переменные устроены внутри


Типы данных и функции вывода
Программы на языке Питон представляют собой обычные текстовые файлы, в которых записана последовательность команд. Код легко читается и интуитивно понятен.

Например, выводящая Hello, world! программа записывается всего в одну строку: 

print('Hello, world!')
В этой программе вызывается функция печати print, которой в качестве параметра передается строка, содержащая в себе фразу Hello, world!. Если мы хотим задать какую-то строку, то должны обрамлять её одинарными (') или двойными(") кавычками, иначе она будет интерпретироваться как код на языке Питон.

Кроме строк в сегодняшнем занятии мы рассмотрим целочисленный тип данных. Например, можно посчитать результат вычисления арифметического выражения 2 + 3 и вывести его с помощью такой однострочной программы на языке Питон:

print(2 + 3)
Такая программа выведет результат вычисления выражения, который будет равен 5. Если бы числа 2 и 3 были заключены в кавычки, то они интерпретировались бы как строки, а операция + проводила бы конкатенацию (склеивание) строк. Например, такой код:

print('2' + '3')
выведет 23 - строку, состоящую из склеенных символов '2' и '3'.

Функция print может принимать и несколько параметров, тогда они будут выводиться через пробел, причем параметры могут иметь различные типы. Если мы хотим получить вывод вида 2 + 3 = 5, то можем воспользоваться следующей программой:

print('2 + 3 =', 2 + 3)
Обратите внимание, что в строке '2 + 3 =' нет пробела после знака =. Пробел появляется автоматически между параметрами функции print. Что же делать, если хочется вывести строку вида 2+3=5 (без пробелов)? Для этого понадобится именованный параметр sep (separator, разделитель) для функции print. Та строка, которая передается в качестве параметра sep будет подставляться вместо пробела в качестве разделителя. В этой задаче мы будем использовать пустую строку в качестве разделителя. Пустая строка задается двумя подряд идущими кавычками.

print('2+3=', 2 + 3, sep='')
В качестве параметра sep можно использовать любую строку, в том числе состоящую из нескольких символов. Если нам нужно сделать несколько разных разделителей для разных частей строк, то не остается другого выбора, кроме как использовать несколько подряд идущих функций print. Например, если мы хотим вывести строку вида 1 + 2 + 3 + 4 = 10, то можем попробовать воспользоваться следующим кодом:

print(1, 2, 3, 4, sep=' + ')
print(' = ', 1 + 2 + 3 + 4, sep='')
Однако, вывод такого кода нас огорчит. Он будет выглядеть как: 

1 + 2 + 3 + 4

 = 10 

Это связано с тем, что после каждой функции print по умолчанию осуществляется перевод строки. Для изменения того, что будет печататься после вывода всего, что есть в функции print можно использовать именованный параметр end. Например, в нашем случае после первого print мы не хотели бы печатать ничего. Правильный код выглядит следующим образом:

print(1, 2, 3, 4, sep=' + ', end='')
print(' = ', 1 + 2 + 3 + 4, sep='')
В качестве end также можно использовать абсолютно любую строку. 


Переменные и арифметические выражения
Переменные
В некоторых задачах вычисления удобно проводить используя вспомогательные переменные. Например, в школьных формулах по физике было удобно вычислять не гигантское выражение целиком, а запоминая результаты вычисления во вспомогательные переменные. Для примера решим задачу вычисления пройденного расстояния по известному времени и скорости:

1234
speed = 108
time = 12
dist = speed * time
print(dist)
В этой программе мы создаем три переменные: speed для скорости, time для времени и dist для вычисленного расстояния. При использовании переменых в арифметическом выражении просто используется значение, которое лежит в переменной.

Для присваивания значения переменной используется знак =. Имя переменной должно быть записано слева от знака присваивания, а арифметическое выражение (в котором могут быть использованы числа и другие уже заданные переменные) - справа. Имя переменной должно начинаться с маленькой латинской буквы, должно быть осмысленным (анлийские слова или общеупотребимые сокращения) и не должно превышать по длине 10-15 символов. Если логичное имя переменной состоит из нескольких слов, то нужно записывать его с помощью camelTyping (каждое новое слово кроме первого должно быть записано с большой буквы).

Подбробнее о том, как осуществляется присваивание будет описано ниже.

Арифметические выражения
Мы уже использовали арифметические выражения в наших программах, в частности операции + и *. Также существует ряд других арифметических операций, которые приведены в таблице:

Знак  Операция              Операнд 1 Операнд 2 Результат
  +   Сложение                11        6         17
  -   Вычитание               11        6         5
  *   Умножение               11        6         66
  //  Целочисленное деление   11        6         1
  %   Остаток от деления      11        6         5
  **  Возведение в степень    2         3         8

Все операции инфиксные (записываются между операндами), т.е., например, для возведения 2 в степень 3 нужно писать 2**3.

Особо остановимся на операциях вычисления целой части и остатка от деления от числа.
Пусть заданы два числа A и B, причем B > 0. Обозначим за C целую часть от деления A на B, C = A // B, а за D - остаток от деления A на B, D = A % B.
Тогда должны выполняться следующие утверждения:
  A = B × C + D  
  0 ≤ D < B  
Эти утверждения необходимы для понимания процесса взятия остатка от деления отрицательного числа на положительное. Нетрудно убедиться, что если -5 разделить на 2, то целая часть должна быть равна -3, а остаток равен 1. В некоторых других языках программирования остатки в такой ситуации могут быть отрицательными, что неправильно по математическим определениям.
В случае, если B < 0 выполняются следующие утверждения:
  A = B × C + D  
  B < D ≤ 0  

Например, при делении 11 на -5 мы получим целую часть равную -3, а остаток будет равен -4. 
Если же разделить -11 на -5, то целая часть будет равна 2, а остаток будет равен -1.
Обратите внимание, что целые числа в Питоне не имеют ограничений на длину (кроме объема доступной памяти).


Операции над строками
Строки также можно сохранять в переменные и использовать в некотором ограниченном количестве выражений. В частности, можно склеивать две строки с помощью операции +:

goodByePhrase = 'Hasta la vista'
person = 'baby'
print(goodByePhrase + ', ' + person + '!')
Складывать число со строкой (и наоборот) нельзя. Но можно воспользоваться функцией str, которая по числу генерирует строку. Str - это сокращение от слова string, которое можно перевести на русский как "строка, которая представляет собой последовательность символов". Например, задачу про вывод 2 + 3 = 5 можно решить и таким способом: 

answer = '2 + 3 = ' + str(2 + 3)
print(answer)


Чтение данных
Можно умножить строку на целое неотрицательное число, в результате получится исходная строка, повторенная заданное число раз: 

word = 'Bye'
phrase = word * 3 + '!'
print(phrase)
Программы, которые умеют только писать, но не умеют читать, редко представляют интерес для пользователей. Узнавать что-то из внешнего мира наши программы будут с помощью функции input(). Эта функция считывает строку из консоли, чтобы закончить ввод строки нужно нажать Enter. Под строкой в данном случае понимается английское слово line, что означает "строка, оканчивающаяся переводом строки". Например, если в такую программу: 

name = input()
print('I love', name)
ввести слово Python, то она напечатает I love Python.

Во многих задачах нам требуется работать со введенными числами, а читать мы умеем только строки. Чтобы преобразовать строку, состоящую из цифр (и, возможно, знака "-" перед ними) в целое число можно воспользоваться функцией int (сокращение от английского integer, "целое число"). Например, решение задачи о сложении двух чисел будет выглядеть так:

a = int(input())
b = int(input())
print(a + b)
Функция int может быть применена не только к результату, возвращаемому функцией input, но и к произвольной строке.

В строках могут быть не только буквы, цифры и прочие знаки препинания, но и, например, символы табуляции и перевода строки. Чтобы использовать эти символы в константной строке в коде программы необходимо записывать их как \t и \n соответственно. Использование бэкслеша перед символом называется экранирование. Также существуют и другие символы, которые требуют бэкслеша перед собой. Например, это кавычки \' и \'' (использование бэкслеша просто необходимо, если в строке используются оба типа кавычек), а также, собственно, символ бэкслеша, который надо записывать как \\.

В случае считывания с помощью input символы в консоли экранировать не нужно. 


Примеры решения задач
Рассмотрим несколько задач, решаемых с помощью арифметических операций, которые показывают некоторые идеи.

Пусть есть два товара, первый из них стоит A рублей B копеек, а второй - C рублей D копеек. Сколько рублей и копеек стоят эти товары вместе. 

В задачах где есть несколько размерностей величин (например, рубли и копейки, километры и метры, часы и минуты) следует переводить все в наименьшую единицу измерения, осуществлять необходимые действия, а затем переводить обратно к нужным единицам.

В нашей задаче наименьшей единицей являются копейки, поэтому все цены следует перевести в них, затем сложить их, а затем перевести результат обратно в рубли и копейки. Код решения будет выглядеть так:

a = int(input())
b = int(input())
c = int(input())
d = int(input())
cost1 = a * 100 + b
cost2 = c * 100 + d
totalCost = cost1 + cost2
print(totalCost // 100, totalCost % 100)
Для определения количества рублей нужно разделить цену в копейках на 100 нацело, а для определения оставшегося числа копеек - посчитать остаток от деления на 100.

Следующая задача: Вася играет в Super Mario Bros. очень хорошо и получил N дополнительных жизней. Известно, что переменная, в которой хранится количество жизней может принимать значения от 0 до 255. В случае, если было 255 жизней и игрок получил дополнительную жизнь, счетчик обнуляется. Сколько жизней на счетчике?

В этой задаче достаточно посчитать остаток от деления введенного числа на 256. Такие действия часто требуются, например, при работе со временем (при переходе через сутки счетчик времени обнуляется). Решение задачи выглядит так: 

n = int(input())
print(n % 256)

Еще примеры решения задач
Следующая задача: вводится число N, необходимо отрезать от него K последних цифр. Например, при N = 123456 и K = 3 ответ должен быть 123.

Для решения этой задачи нужно понять, что происходит при целочисленном делении на 10 (основание системы счисления). Если мы разделим число на 10, то будет отброшена последняя цифра, независимо от того, какой она была. Если разделим число на 100 - будет отброшено две последние цифры. Исходя из этого получается решение задачи: необходимо просто разделить число N на 10 в степени K: 

n = int(input())
k = int(input())
print(n // 10**k)


Как переменные устроены внутри
В языке Питон все переменные являются ссылками на объекты. Каждый объект имеет тип (нам известны int и str) и содержимое, в нашем случае конкретное число или последовательность символов.

Переменные (ссылки) в языке Питон удобно представлять себе как ярлычки на веревочке, которые привязаны к какому-то объекту. Вообще говоря, к одному объекту может быть привязано сколь угодно много ярлыков. Различные переменные с одинаковым значением фактически являются ярлычками, привязанными к одному и тому же объекту. 

Типы int и str в Питоне являются неизменяемыми. Любое присваивание в Питоне не может изменить неизменяемый тип, а может только изменить место, на которое указывает ссылка (и, при необходимости, сконструировать новый объект).

Например, команда x = 2, приведет сначала к созданию объекта типа "целое число" со значением 2 в памяти, а затем к созданию переменной x, которая будет являться ссылкой на этот объект.

Если после этого написать y = 2, то новый объект со значением 2 создаваться не будет, а создастся только новая ссылка с именем y, показывающая на тот же самый объект, что и ссылка x.

Если теперь написать строку x = 3, то с объектом со значением 2 ничего не случится, ведь он неизменяемый. Создастся новый объект со значением 3, ссылка x отвяжется от объекта со значением 2 и привяжется к новому объекту 3. При этом к объекту 2 останется привязана ссылка y.

Если изменить и значение переменной y, то у объекта 2 не останется ссылок на него. Поэтому он может быть безболезненно уничтожен при сборке мусора, ведь получить к нему доступ уже невозможно - на него не ссылается ни одна переменная.

Константные значения в программе (например, явно заданные числа в исходном коде программы) также являются ссылками на объекты, содержимое которых совпадает со значением этих констант. Однако эти ссылки не могут быть изменены и не могут участвовать в присваивании с левой стороны от знака =. 
