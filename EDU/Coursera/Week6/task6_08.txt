Проходной балл

Для поступления в вуз абитуриент должен предъявить результаты трех экзаменов
в виде ЕГЭ, каждый из них оценивается целым числом от 0 до 100 баллов.
При этом абитуриенты, набравшие менее 40 баллов (неудовлетворительную оценку)
по любому экзамену из конкурса выбывают. Остальные абитуриенты участвуют
в конкурсе по сумме баллов за три экзамена.
В конкурсе участвует N человек, при этом количество мест равно K.
Определите проходной балл, то есть такое количество баллов,
что количество участников, набравших столько или больше баллов не превосходит K,
а при добавлении к ним абитуриентов, набравших наибольшее количество баллов
среди непринятых абитуриентов, общее число принятых абитуриентов станет больше K.

Формат ввода
Программа получает на вход количество мест K. Далее идут строки с информацией
об абитуриентах, каждая из которых состоит из имени
(текстовая строка содержащая произвольное число пробелов) и трех чисел от 0 до 100,
разделенных пробелами.
Используйте для ввода файл input.txt с указанием кодировки utf8
(для создания такого файла на своем компьютере в программе Notepad++ следует
использовать кодировку UTF-8 без BOM).

Формат вывода

Программа должна вывести проходной балл в конкурсе. Выведенное значение должно быть
минимальным баллом, который набрал абитуриент, прошедший по конкурсу.
Также возможны две ситуации, когда проходной балл не определен.
Если будут зачислены все абитуриенты, не имеющие неудовлетворительных оценок,
программа должна вывести число 0.
Если количество имеющих равный максимальный балл абитуриентов больше чем K,
программа должна вывести число 1.
Используйте для вывода файл output.txt с указанием кодировки utf8.

Предупреждение
Пожалуйста, тестируйте файловый ввод и вывод на своем компьютере.
В этой задаче слушатели часто получают ошибки вроде RE на первом тесте,
протестировав у себя с помощью консоли и просто заменив input()
на чтение из файла перед сдачей. К сожалению, такую замену не всегда удается
сделать без ошибок, и решение слушателей действительно перестает правильно
работать даже на первом тесте.

Примеры

Тест 1
Входные данные:
5
Иванов Сергей 70 70 70
Сергеев Петр 100 100 0
Петров Василий 70 60 70
Васильев Андрей 70 60 70
Андреев Денис 100 30 100
Денисов Роман 50 50 50
Романов Иван 60 70 70
Ким Чен Ир 50 50 50
Ким Ир Сен 40 40 40

Вывод программы:
200



Тест 2
Входные данные:
1
Иванов Сергей 40 40 40
Сергеев Петр 100 100 39

Вывод программы:
0



Тест 3
Входные данные:
1
Иванов Сергей 60 60 60
Сергеев Петр 100 40 40

Вывод программы:
1

Решение Юрия Прудникова 2 года назад
f_in = open('input.txt', 'r', encoding='utf-8')
k = int(f_in.readline())
in_list = []
for a in f_in:
    a_splt = a.split()
    po1 = int(a_splt[-3])
    po2 = int(a_splt[-2])
    po3 = int(a_splt[-1])
    if po1 >= 40 and po2 >= 40 and po3 >= 40:
        in_list.append(po1 + po2 + po3)
f_in.close()

in_list.sort(reverse=True)

if len(in_list) <= k:
    print(0)
else:
    if in_list[k - 1] == in_list[k]:
        d = k - 1
        while d > 0 and in_list[d - 1] == in_list[d]:
            d = d - 1
        if d == 0:
            print(1)
        else:
            print(in_list[d - 1])
    else:
        print(in_list[k - 1])


Мои тесты, позволившие выполнить данное задание
И
Игорь Стрижак
Учащийся
4 года назад

Написал несколько тестов, охватывающих большинство случаев. ВНИМАНИЕ, ТОЛЬКО ПЕРВЫЕ 3 ТЕСТА СООТВЕТСТВУЮТ НУМЕРАЦИИ АВТОМАТИЧЕСКОЙ СИСТЕМЫ.

Тест 1

Входные данные:

5

Иванов Сергей 70 70 70

Сергеев Петр 100 100 0

Петров Василий 70 60 70

Васильев Андрей 70 60 70

Андреев Денис 100 30 100

Денисов Роман 50 50 50

Романов Иван 60 70 70

Ким Чен Ир 50 50 50

Ким Ир Сен 40 40 40



Вывод программы:

200



Тест 2

Входные данные:

1

Иванов Сергей 40 40 40

Сергеев Петр 100 100 39



Вывод программы:

0



Тест 3

Входные данные:

1

Иванов Сергей 60 60 60

Сергеев Петр 100 40 40



Вывод программы:

1



Тест 4

Входные данные:

0

Иванов Сергей 70 70 70

Сергеев Петр 100 100 0

Петров Василий 70 60 70

Васильев Андрей 70 60 70

Андреев Денис 100 30 100

Денисов Роман 50 50 50

Романов Иван 60 70 70

Ким Чен Ир 50 50 50

Ким Ир Сен 40 40 40



Вывод программы:

0



Тест 5

Входные данные:

5

Иванов Сергей 70 70 70

Сергеев Петр 100 100 0

Петров Василий 70 50 70

Васильев Андрей 70 60 70

Андреев Денис 100 30 100



Вывод программы:

0



Тест 6

Входные данные:

4

Иванов Сергей 70 70 70

Сергеев Петр 100 100 0

Петров Василий 70 50 70

Васильев Андрей 70 60 70

Андреев Денис 100 30 100



Вывод программы:

0



Тест 7

Входные данные:

3

Иванов Сергей 70 70 70

Сергеев Петр 100 100 0

Петров Василий 70 50 70

Васильев Андрей 70 60 70

Андреев Денис 100 30 100



Вывод программы:

0



Тест 8

Входные данные:

2

Иванов Сергей 70 70 70

Сергеев Петр 100 100 0

Петров Василий 70 50 70

Васильев Андрей 70 60 70

Андреев Денис 100 30 100



Вывод программы:

200



Тест 9

Входные данные:

1

Иванов Сергей 70 70 70

Сергеев Петр 100 100 0

Петров Василий 70 50 70

Васильев Андрей 70 60 70

Андреев Денис 100 30 100



Вывод программы:

210



Тест 10

Входные данные:

3

Иванов Сергей 70 70 70

Сергеев Петр 100 100 0

Петров Василий 70 70 70

Васильев Андрей 70 60 70

Андреев Денис 100 30 100



Вывод программы:

0



Тест 11

Входные данные:

2

Иванов Сергей 70 70 70

Сергеев Петр 100 100 0

Петров Василий 70 70 70

Васильев Андрей 70 60 70

Андреев Денис 100 30 100



Вывод программы:

210



Тест 12

Входные данные:

1

Иванов Сергей 70 70 70

Сергеев Петр 100 100 0

Петров Василий 70 70 70

Васильев Андрей 70 60 70

Андреев Денис 100 30 100



Вывод программы:

1


в помощь решающим
Ekaterina Petrukhina
EP

ФОТО ПРОФИЛЯ ДЛЯ УЧАЩЕГОСЯ EKATERINA PETRUKHINA
Ekaterina Petrukhina
Пройденный курс
5 сообщений
·
13 отметок "Нравится"
Assignment: Проходной балл · 4 года назад
фуф, сдалась. задача интересная. напишу примерное описание кода, вдруг кому-то съэкономит время.

для начала как получаем необходиммые данные:

имена и фамилии отбрасывала сразу, при чтении файла по строками, разбивала строку на отдельные элементы, три раза одним методом в отдельной функции вытаскивала из листа последний элемент и удаляла. получался набор из трех оценок, в случае с первой строкой содержащей только один элемент (количество мест) обрабатывала условием на длину листа, получившегося после разбиения строки файла.

в процессе чтения файла, сразу отбрасывала строки количество баллов в которых не удовлетворяют условию принятия в вуз.

на выходе имела список из сумм оценок, только тех абитуриентов, которые теоритически могут быть приняты.

чтение файла закончили, файл закрыли.

создала список их 300 нулевых элементов. (можно было заморочиться с меньшим кол-вом и индексами, но больно уж лень было).

пройдясь по списку с суммами баллов, переложила их в список с нулевыми элементами, добавляя по единице в элемент с индексом равным сумме баллов (линейная сортировка).

далее самое интересное) сделав две проверки на длину списка и кол-во мест (если подходящих студентов (сумм баллов) нет вообще, выводим единицу; если таких студентов меньше или равно кол-ву мест или мест нет вообще, выводим ноль), начинаем перебор с конца списка (300 элементов) по ходу снижения оценок, если встречаем единицу или больше и при этом кол-во мест больше, чем то, что мы встретили, то отдаем места им (вычитаем число из кол-ва мест) и фиксируем индекс элемента (для вывода), если число больше кол-ва мест выходим из цикла. для любых других случаев, непредусмотренных в алгоритме, предварительно присвоила значение единицы для вывода. все. дальше вывод в файл и его закрытие.

всем удачи!

бонус для тех кто лучше понимает алгоритмы и меньше заморачивается с пониманием происходящего =)):

1. функция получающая список:

первая оценка = последний элемент списка, переданного в функцию, получили его значение и удалили

вторая оценка = как первая

третья оценка = как первая

сумма оценок = сложили три оценки если каждая из них не меньше 40

вернули сумму

2. открыли файл, читаем по-строчно. сделали проверку на длину разбитой строки
(если один элемент то это кол-во мест а не баллы) начали читать из файла и
записывать в новый список только суммы баллов полученные из функции.
 (не забыли закрыть файл с входными данными)

3. создали список с нулями из 300 элементов (каждый индекс которого сумма баллов, а значение будет кол-вом абитуриентов с такой суммой)

4. в список из пункта три положили кол-во абитуриентов соответственно каждой сумме баллов ( список[сумма баллов] = кол-во абитуриентов с такой суммой как в индексе) (линейная сортировка в помощь из лекций и предыдущих задач)

5. значение на вывод по-умолчанию, присваем единицу (в конце алгоритма подумайте какой случай не обработали, так вот для этого случая)

6.

6.1  проверка: длина списка из пункта 2 нулевая? - выводим единицу

6.2 проверка: длина списка из пункта 2 не больше кол-ва мест? или кол-во мест нулевое? - выводим ноль

6.3 с конца списка из пункта 3 перебираем элементы, если встречается элемент больше нуля и при этом есть достаточно мест - вычитаем значение элемента из кол-ва мест и фиксируем номер (индекс) элемента, если мест меньше чем значение элемента просто выходим из цикла.

7. выводим последний зафиксированный индекс

8. закрываем файлы

9. сдаем задачу

9 Лайки
Ответить
Подписаться на обсуждение

Старые
Самые популярные
Новые
Запись пользователя Малышева Валерия
МВ

МАЛЫШЕВА ВАЛЕРИЯ
 · 3 года назад
Использовала другой способ создания списка с суммами баллов участников:

Внутри цикла for проходимся по строчкам файла; каждую строчку поочередно режем на подстрочки и кладем их в список(line), для этого используем метод split():

21
for row in input_file:
    line = row.split()
2.  далее создаем список, куда сохраняем 3 последних элемента списка line(используем отрицательные индексы, чтобы точно попали баллы, а не имя и фамилия)  в виде чисел (используем функцию int()) , сортируем полученный список в порядке убывания. В итоге у нас по каждому участнику будет создан список с его баллами по трем экзаменам (например, [100, 50, 30]):

12
student_grade = [int(line[-1]), int(line[-2]), int(line[-3])]
student_grade.sort(reverse=True)
3. Далее отсекаем с помощью условия тех участников, у кого хотя бы по одному из экзаменов меньше 40 баллов (т.к. мы отсортировали баллы по 3м экзаменам в порядке убывания ранее, то получается, что самое маленькое число баллов по 3м экзаменам будет последним элементом списка, поэтому его индекс будет равен [-1]):

1
if student_grade[-1] >= 40:
4.  Если условие выполняется, то в новый список сохраняем итоговое значение(сумму) по 3м экзаменам:

123
all_grades.append(student_grade[0] +
                  student_grade[1] +
                  student_grade[2])
В итоге у вас будет список all_grades, где будет храниться сумма баллов по 3м экзаменам тех участников, кто прошел.


2 Лайки
Ответить
Запись пользователя Sultan Fan2011
SF

SULTAN FAN2011
 · 3 года назад · Отредактировано
Дополню - вот в этом видео есть разбор задачи "Золотые слитки", которая поможет в решении

  https://www.youtube.com/watch?v=Y9J1odinMS0&list=PLoWe6c2qF0NKcphDJT8gqe878DUb3rGSf&index=6&t=0s


Пояснение условия  Станислав Кисляков  Учащийся 7 месяцев назад
Если Ваше решение не проходит тестирование, перечитывайте условие.
Все исходные условия считываются из файла (тест 11, с которым я мучился).
Вывод нуля - конкурса на поступление нет (доступных мест больше либо столько же, сколько абитуриентов, не проваливших ни одного экзамена)
Вывод единицы - количество абитуриентов, набравших однаковый максимальный балл, превышает число доступных мест
Количество поступивших абитуриентов не может превышать количества доступных мест.

ПРИМЕР:
Доступных мест: 2

Рейтинг сдавших экзамен: [300,  120, 120]

Результат: проходной балл будет 300, т.к., если его сделать 120, то количество поступивших будет превышать количество доступных мест.


Монахов Владимир Николаевич Учащийся год назад

Строится массив подсчёта величин набранных баллов из 181 элемента
(суммарные баллы до 120 не считаются, т.к. точно не являются проходными),
массив разворачивается и перебором по нему суммируются количества счастливчиков,
пока это кол-во не превышает K.

with open('input.txt', 'r', encoding='utf8') as inFile:
    L = [tuple(i.split()) for i in inFile]
K = int(L[0][0])
S = [0] * 181
N = 1

for i in range(1, len(L)):
    m1 = int(L[i][-3])
    m2 = int(L[i][-2])
    m3 = int(L[i][-1])
    if m1 >= 40 and m2 >= 40 and m3 >= 40:
        S[m1 + m2 + m3 - 120] += 1
S = S[::-1]

count = 0
for j in range(len(S)):
    if count + S[j] > K:
        break
    if S[j] > 0:
        count += S[j]
        N = 300 - j
    if j == len(S)-1:
        N = 0

print(N)

