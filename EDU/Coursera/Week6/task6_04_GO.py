# Задача Гражданская оборона
# Функция для именованного параметра key
# для сортировки списка пар (номер города, номер бомбоубежища)


def sorter(point):
    return point[0]


# Формируем список пар (расстояние до города от начала дороги, номер города)
n = int(input())
towns = list(map(int, input().split()))  # водится список расстояний
for i in range(n):
    towns[i] = (towns[i], i + 1)  # строится пара (вместо функции zip)
# сортируем по расстояниям городов от начала дороги
towns.sort()
# Аналогично, формируем список пар
# (расстояние до бомбоубежища от начала дороги, номер бомбоубежища)
m = int(input())
shelters = list(map(int, input().split()))
for i in range(m):
    shelters[i] = (shelters[i], i + 1)
# сортируем по расстояниям
shelters.sort()
i = 0
j = 0
# формируем список пар (номер города, номер бомбоубежища) по индексу [1],
# а поиск идёт по расстояниям - индекс [0]
v = []
while i < len(towns):
    # не является ли бомбоубежище единственным или последним в списке
    if j == len(shelters) - 1:
        v.append((towns[i][1], shelters[j][1]))
    else:
        # Для j и j+1 бомбоубежищ рассчитываем середину.
        # Если расстояние для города меньше или равно середине,
        # то этот город относится к j бомбоубежищу
        if towns[i][0] <= shelters[j][0] + \
                ((shelters[j+1][0] - shelters[j][0])//2):
            v.append((towns[i][1], shelters[j][1]))
        # иначе переходим к следующему бомбоубежищу
        elif towns[i][0] > shelters[j][0] + \
                ((shelters[j+1][0] - shelters[j][0])//2):
            j += 1
            continue
    i += 1
# Сортируем пары по 0-му индексу, т.е. по порядку номеров городов
v.sort(key=sorter)
# Печатаем все вторые элементы пары, т.е. список бомбоубежищ
for i in range(len(v)):
    print(v[i][1], end=' ')
